// <auto-generated />
using System;
using DNU.CanteenConnect.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DNU.CanteenConnect.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702153624_InitialCreateSqlServer")]
    partial class InitialCreateSqlServer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Canteen", b =>
                {
                    b.Property<int>("CanteenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CanteenId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CanteenId");

                    b.ToTable("Canteens");

                    b.HasData(
                        new
                        {
                            CanteenId = 1,
                            Location = "Tầng 1, Tòa nhà C",
                            Name = "Nhà ăn C1",
                            OpeningHours = "07:00 - 19:00"
                        },
                        new
                        {
                            CanteenId = 2,
                            Location = "Tầng 2, Tòa nhà B",
                            Name = "Nhà ăn B2",
                            OpeningHours = "07:00 - 19:00"
                        });
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAtAddition")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.DailyMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<int?>("CanteenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MenuDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MenuId");

                    b.HasIndex("CanteenId");

                    b.HasIndex("MenuDate", "CanteenId")
                        .IsUnique()
                        .HasFilter("[CanteenId] IS NOT NULL");

                    b.ToTable("DailyMenus");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.FoodCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Các món ăn no",
                            Name = "Món Chính"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Các món ăn kèm hoặc ăn vặt",
                            Name = "Món Phụ"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Các loại nước giải khát",
                            Name = "Đồ Uống"
                        });
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.FoodItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CanteenId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FoodCategoryCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialOfTheDay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ItemId");

                    b.HasIndex("CanteenId");

                    b.HasIndex("FoodCategoryCategoryId");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CanteenId = 1,
                            Description = "Cơm nóng hổi ăn kèm gà xối mỡ giòn tan",
                            FoodCategoryCategoryId = 1,
                            ImageUrl = "https://topchuan.com/wp-content/uploads/2023/04/Com-Ga-Xoi-Mo-77-1.jpg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = true,
                            Name = "Cơm Gà Xối Mỡ",
                            Price = 45000m
                        },
                        new
                        {
                            ItemId = 2,
                            CanteenId = 1,
                            Description = "Phở truyền thống với thịt bò tươi",
                            FoodCategoryCategoryId = 1,
                            ImageUrl = "https://cdn.tgdd.vn/Files/2017/03/18/962092/an-lien-3-bat-pho-voi-cong-thuc-nau-pho-nay-202201261419401397.jpg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Phở Bò",
                            Price = 40000m
                        },
                        new
                        {
                            ItemId = 3,
                            CanteenId = 1,
                            Description = "Trà sữa thơm ngon với trân châu đường đen dẻo dai",
                            FoodCategoryCategoryId = 3,
                            ImageUrl = "https://cdn.tgdd.vn/Files/2022/01/21/1412109/huong-dan-cach-lam-tra-sua-tran-chau-duong-den-202201211522033706.jpg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = true,
                            Name = "Trà Sữa Trân Châu Đường Đen",
                            Price = 25000m
                        },
                        new
                        {
                            ItemId = 4,
                            CanteenId = 1,
                            Description = "Bánh mì giòn rụm kẹp thịt và rau tươi",
                            FoodCategoryCategoryId = 2,
                            ImageUrl = "https://tapchiamthuc.net/wp-content/uploads/2023/03/banh-mi-kep-viet-nam-17.jpg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Bánh Mì Kẹp",
                            Price = 20000m
                        },
                        new
                        {
                            ItemId = 5,
                            CanteenId = 1,
                            Description = "Mì Ý với sốt bò băm đậm đà",
                            FoodCategoryCategoryId = 1,
                            ImageUrl = "https://cdn.tgdd.vn/Files/2019/04/15/1160777/cach-lam-mi-spaghetti-sot-bo-bam-trong-3-phut-voi-panzani-202203031421227202.jpg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Mì Ý Sốt Bò Băm",
                            Price = 50000m
                        },
                        new
                        {
                            ItemId = 6,
                            CanteenId = 1,
                            Description = "Nước cam ép tươi nguyên chất",
                            FoodCategoryCategoryId = 3,
                            ImageUrl = "https://tse3.mm.bing.net/th?id=OIP.BMSD4FVGoFVZDnP6_0gYoQHaEk&pid=Api&P=0&h=180",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Nước Cam Ép",
                            Price = 18000m
                        },
                        new
                        {
                            ItemId = 7,
                            CanteenId = 1,
                            Description = "Nem lụi thơm ngon, ăn kèm nước chấm đặc biệt",
                            FoodCategoryCategoryId = 2,
                            ImageUrl = "https://statics.vinpearl.com/nem-lui-nha-trang-07_1630987697.jpeg",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Nem Lụi",
                            Price = 35000m
                        },
                        new
                        {
                            ItemId = 8,
                            CanteenId = 1,
                            Description = "Bún chả Hà Nội trứ danh",
                            FoodCategoryCategoryId = 1,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.0M4f-v1qaFU6jzyxobA9QAHaFj&pid=Api&P=0&h=180",
                            IsAvailable = true,
                            IsSpecialOfTheDay = false,
                            Name = "Bún Chả",
                            Price = 42000m
                        });
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CanteenId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("CanteenId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAtOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a725130b-d248-4395-8178-01124e5251a1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b845130b-d248-4395-8178-01124e5251a2",
                            Name = "CanteenStaff",
                            NormalizedName = "CANTEENSTAFF"
                        },
                        new
                        {
                            Id = "c965130b-d248-4395-8178-01124e5251a3",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d125130b-d248-4395-8178-01124e5251a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f286828a-1a3b-4c4f-a719-7f51a4e21a2c",
                            CreatedDate = new DateTime(2025, 7, 2, 15, 36, 23, 317, DateTimeKind.Utc).AddTicks(3970),
                            Email = "admin@canteen.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CANTEEN.COM",
                            NormalizedUserName = "ADMIN@CANTEEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELS2GPBQiWOMKeM0JiofIJUpgaxnUlO8haHGTCzphar9iH42WY/oZEIlXu4YLdjzAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a5a51c4-118d-4f11-9a74-9f20e4b868e4",
                            TwoFactorEnabled = false,
                            UserName = "admin@canteen.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d125130b-d248-4395-8178-01124e5251a4",
                            RoleId = "a725130b-d248-4395-8178-01124e5251a1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Cart", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.CartItem", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.DailyMenu", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Canteen", "Canteen")
                        .WithMany("DailyMenus")
                        .HasForeignKey("CanteenId");

                    b.Navigation("Canteen");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.FoodItem", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Canteen", "Canteen")
                        .WithMany("FoodItems")
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.FoodCategory", "FoodCategory")
                        .WithMany("FoodItems")
                        .HasForeignKey("FoodCategoryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canteen");

                    b.Navigation("FoodCategory");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.MenuItem", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.FoodItem", "FoodItem")
                        .WithMany("MenuItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.DailyMenu", "DailyMenu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMenu");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Order", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Canteen", "Canteen")
                        .WithMany("Orders")
                        .HasForeignKey("CanteenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canteen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.OrderItem", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Review", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.FoodItem", "FoodItem")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNU.CanteenConnect.Web.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DNU.CanteenConnect.Web.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Canteen", b =>
                {
                    b.Navigation("DailyMenus");

                    b.Navigation("FoodItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.DailyMenu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.FoodCategory", b =>
                {
                    b.Navigation("FoodItems");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.FoodItem", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DNU.CanteenConnect.Web.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
